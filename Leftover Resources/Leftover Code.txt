   // Draw centre line
          g.drawString("MID", Globals.screenW / 2, 400);
        g.setColor(Color.yellow);
        g.setLineWidth(2f);
        g.drawLine(Globals.screenW / 2, 0, Globals.screenW / 2, Globals.screenH);
  
  /**
     * Align the text in a list of labels
     *
     * @param list
     * @param sep
     * @return
     */
    private void alignLabels(ArrayList<String> list, char sep) {

        // Find longest length (before separator)
        int maxLen = 0;
        // For all labels
        for (int i = 1; i < list.size(); i++) {

            // Split line
            String[] parts = list.get(i).split("" + sep + "");

            // Get length of first part
            int curLen = parts[0].trim().length();

            // If first line OR max len is less than current
            if (i == 1 || maxLen < curLen) {
                // Update maxLen
                maxLen = curLen;
            }
        }

        // For all labels
        for (int i = 1; i < list.size(); i++) {

            // Split line
            String[] parts = list.get(i).split("" + sep + "");

            // Make new string
            // Initialize with first part and sep
            String newLine = parts[0].trim() + sep;

            // Add spaces
            int diff = maxLen - parts[0].length();
            for (int d = 0; d < diff; d++) {
                newLine += " ";
            }

            // Add last part
            newLine += parts[1].trim();

            // Replace string in list
            list.set(i, newLine);
        }

        // TEST
        System.out.println("### Lines");
        for (String s : list) {
            System.out.println(s);
        }
        System.out.println(" ");
    }
// <<<<<<<<<<<<<<<<<<<<< MAP IMPLEMENTATION 1 !!!!!!!!!!!!!!!!!   
//// This will keep a list of Tiles that are blocked
//private boolean blocked[][]
// For collision detection, we have a list of Rectangles you can use to test against
//private ArrayList<Rectangle> blocks;   
//   This will create an Array with all the Tiles in your map. 
// When set to true, it means that Tile is blocked.
//blocked = new boolean[this.getWidth()][this.getHeight()];
//
//// Loop through the Tiles and read their Properties
//
//// Set here the Layer you want to Read. In your case, it'll be layer 1,
//// since the objects are on the second layer.
//int layer = 1; 
//
//for(int i = 0; i < this.getWidth(); i++) {
//    for(int j = 0; j < this.getHeight(); j++) {
//
//        // Read a Tile
//        int tileID = getTileId(i, j, layer);
//
//        // Get the value of the Property named "blocked"
//        String value = getTileProperty(tileID, "blocked", "false");
//
//        // If the value of the Property is "true"...
//        if(value.equals("true")) {
//
//            // We set that index of the TileMap as blocked
//            blocked[i][j] = true;
//
//            // And create the collision Rectangle
//            blocks.add(new Rectangle((float)i * tileSize, (float)j * tileSize, tileSize, tileSize));
//        }
//    }
//}
//    ///boolean isInCollision = false;
//for(Rectangle ret in yourTiledMap.getBlocks()) {
//    if(player.bounds.intersects(ret.bounds)) {
//        isInCollision = true;
//    }
//}
////    
    
// <<<<<<<<<<<<<<<<<<<<< MAP IMPLEMENTATION 2 !!!!!!!!!!!!!!!!! 
//    public boolean[][] blocked;
//    
//    public CollUtil(TiledMap map)
//    {
//       
//       
//        
//      int NUMBEROFTILESINAROW = map.getHeight()-2;
//      int NUMBEROFTILESINACOLUMN = map.getWidth()-2; 
//      int NUMBEROFLAYERS = map.getLayerCount();
//        
//        blocked = new boolean[NUMBEROFTILESINAROW][NUMBEROFTILESINACOLUMN];
//        
//             for (int l = 0; l < NUMBEROFLAYERS; l++) 
//             {
//             String layerValue = map.getLayerProperty(l, "blocked", "false");
//            if (layerValue.equals("true")) {
//              
//                for (int c = 0; c < NUMBEROFTILESINACOLUMN; c++) 
//                {
//                    for (int r = 0; r < NUMBEROFTILESINAROW; r++) 
//                    {
//                        if (map.getTileId(c, r, l) != 0) 
//                        {
//                            blocked[c][r] = true;
//                        }
//                    }
//                }
//            }
//        }
//    }
//    
//    
//    /**
//     * Only for 64x64 tiles
//     * @param x
//     * @param y
//     * @return 
//     */
//    public boolean canPass(float x, float y) 
//    {
//        try 
//        {
//            int xBlock = (int) x / 64;
//            int yBlock = (int) y / 64;
//            return !blocked[xBlock][yBlock];
//        }
//        catch (Exception e)
//        {
//            return false;
//        }
//    }

    
    
    
// public boolean upAllowed(playerX, player Y, relSpeed)
// Check for blocked tiles
// boolean cond1 = coll.canPass(playerX + 63, playerY - relSpeed);
// boolean cond2 = coll.canPass(playerX + 1, playerY - relSpeed); //add camY factor
// Check for edge of map
// boolean cond3 = cam.isTooUp()

// public boolean downAllowed(playerX, player Y, relSpeed)
// Check for blocked tiles
// boolean cond1 = coll.canPass(playerX + 63, playerY + 64 + relSpeed);
// boolean cond2 = coll.canPass(playerX + 1, playerY + 64 + relSpeed);
// Check for edge of map
// boolean cond3 = cam.isTooDown()
    
// public boolean leftAllowed(playerX, player Y, relSpeed)
// Check for blocked tiles
// boolean cond1 = coll.canPass(playerX - relSpeed, playerY + 1);
// boolean cond2 = coll.canPass(playerX - relSpeed, playerY + 63);
// Check for edge of map
// boolean cond3 = cam.isTooLeft()

// public boolean rightAllowed(playerX, player Y, relSpeed)
// Check for blocked tiles
// boolean cond1 = coll.canPass(playerX + 50 + relSpeed, playerY + 63);
//boolean cond2 = coll.canPass(playerX + 50 + relSpeed, playerY + 1);
// Check for edge of map
//boolean cond3 = cam.isTooRight()
    








//        public void drawSpriteExample()
//        {
//            // SpriteSheet ss = new SpriteSheet("image", 16, 16); 
//            for(int i = 0; i != 6; i++)
//            {
//               ss.getSprite(i, 0).draw(50, i*90, 5);
//               ss.getSprite(i, 1).draw(200, i*90, 5);
//               ss.getSprite(0, 1).draw(300, i*80, 5);
//            }
//        }












 
   /**
 * how to do particle effects
 * @param container The surrounding game container
 */
public void particleTest(GameContainer container, int delta) throws SlickException {
	
     //Image particleImg = new Image(particle png)
     //ParticleSystem  ps = new ParticleSystem(particleImg, 1000);
	
//	try 
//        {
//	   
//        // ParticleEmitter smoke = ParticleIO.loadEmitter(smoke xml)
//         
//         smoke.setEnabled(true);
//         FireEmitter fire = new FireEmitter(200,200,5);
//         fire.setEnabled(true);
//
//        
//          ps.addEmitter(smoke);
//          ps.addEmitter(fire);
//          ps.setVisible(true);
//          ps.setPosition(400, 200);
//          
//          ps.setBlendingMode(ParticleSystem.BLEND_COMBINE);
//
//          ps.update(delta);
//
//         ps.render(400,200);
//               
//        }
//	catch (Exception e) 
//        {
//		throw new SlickException("Failed to load particle systems", e);
//	}
}
   
